{
    "author": "Anaren Inc.",
    "categories": [
        "Temperature",
        "Sensor"
    ],
    "code": {
        "connected": " \r\n",
        "global": "",
        "interval": " \r\n",
        "setup": "\tDS1307_Init();"
    },
    "config": {
        "file": "ds1307_config.h",
        "values": {
            "acc_gyro_w_odr_xl": {
                "input": "Combo",
                "name": "DS1307_SQW_OUT_PIN_FREQUENCY",
                "options": [
                    "1Hz",
                    "4_096kHz",
                    "8_192kHz",
                    "32_768kHz",
                    "Low",
                    "High"
                ],
                "prefix": "#define DS1307_SQW_OUT_PIN_FREQUENCY DS1307_SQW_OUT_PIN_FREQUENCY_",
                "regex": "^[a-zA-Z0-9_.]*$",
                "value": "Low"
            }
        }
    },
    "description": "",
    "elements": {
        "getDate": {
            "code": "",
            "icon": null,
            "inputType": "void",
            "label": "Get Date",
            "language": {
                "en": {
                    "label": "Get Date"
                }
            },
            "returnType": "unsigned int"
        },
        "getDatetime": {
            "code": "",
            "icon": null,
            "inputType": "void",
            "label": "Get Datetime",
            "language": {
                "en": {
                    "label": "Get Datetime"
                }
            },
            "returnType": "string"
        },
        "getDayOfWeek": {
            "code": "",
            "icon": null,
            "inputType": "void",
            "label": "Get Day of Week",
            "language": {
                "en": {
                    "label": "Get Day of Week"
                }
            },
            "returnType": "unsigned int"
        },
        "getHour": {
            "code": "",
            "icon": null,
            "inputType": "void",
            "label": "Get Hour",
            "language": {
                "en": {
                    "label": "Get Hour"
                }
            },
            "returnType": "unsigned int"
        },
        "getMinutes": {
            "code": "",
            "icon": null,
            "inputType": "void",
            "label": "Get Minutes",
            "language": {
                "en": {
                    "label": "Get Minutes"
                }
            },
            "returnType": "unsigned int"
        },
        "getMonth": {
            "code": "",
            "icon": null,
            "inputType": "void",
            "label": "Get Month",
            "language": {
                "en": {
                    "label": "Get Month"
                }
            },
            "returnType": "unsigned int"
        },
        "getSeconds": {
            "code": "",
            "icon": null,
            "inputType": "void",
            "label": "Get Seconds",
            "language": {
                "en": {
                    "label": "Get Seconds"
                }
            },
            "returnType": "unsigned int"
        },
        "getYear": {
            "code": "",
            "icon": null,
            "inputType": "void",
            "label": "Get Year",
            "language": {
                "en": {
                    "label": "Get Year"
                }
            },
            "returnType": "unsigned int"
        },
        "setDate": {
            "code": "",
            "icon": null,
            "inputType": "unsigned int",
            "label": "Set Date",
            "language": {
                "en": {
                    "label": "Set Date"
                }
            },
            "returnType": "void"
        },
        "setHour": {
            "code": "",
            "icon": null,
            "inputType": "unsigned int",
            "label": "Set Hour",
            "language": {
                "en": {
                    "label": "Set Hour"
                }
            },
            "returnType": "void"
        },
        "setMinutes": {
            "code": "",
            "icon": null,
            "inputType": "unsigned int",
            "label": "Set Minutes",
            "language": {
                "en": {
                    "label": "Set Minutes"
                }
            },
            "returnType": "void"
        },
        "setMonth": {
            "code": "",
            "icon": null,
            "inputType": "unsigned int",
            "label": "Set Month",
            "language": {
                "en": {
                    "label": "Set Month"
                }
            },
            "returnType": "void"
        },
        "setSeconds": {
            "code": "",
            "icon": null,
            "inputType": "unsigned int",
            "label": "Set Seconds",
            "language": {
                "en": {
                    "label": "Set Seconds"
                }
            },
            "returnType": "void"
        },
        "setYear": {
            "code": "",
            "icon": null,
            "inputType": "unsigned int",
            "label": "Set Year",
            "language": {
                "en": {
                    "label": "Set Year"
                }
            },
            "returnType": "void"
        }
    },
    "files": {
        "common": {
            "headers": {
                "ds1307.h": "// Copyright (c) 2014, Anaren Inc.\r\n// All rights reserved.\r\n// \r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n// \r\n// 1. Redistributions of source code must retain the above copyright notice, this\r\n//    list of conditions and the following disclaimer. \r\n// 2. Redistributions in binary form must reproduce the above copyright notice,\r\n//    this list of conditions and the following disclaimer in the documentation\r\n//    and/or other materials provided with the distribution.\r\n// \r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n// \r\n// The views and conclusions contained in the software and documentation are those\r\n// of the authors and should not be interpreted as representing official policies, \r\n// either expressed or implied, of the FreeBSD Project.\r\n\r\n#ifndef DS1307_H\r\n#define DS1307_H\r\n\r\n#include \"../i2c/i2c.h\"\r\n#include \"ds1307_config.h\"\r\n\r\n\r\n//------------------------------------------------------------------------------\r\n/**\r\n *  Defines, enumerations, and structure definitions\r\n */\r\n#ifndef bool\r\n#define bool unsigned char\r\n#endif\r\n\r\n#ifndef true\r\n#define true 1\r\n#endif\r\n\r\n#ifndef false\r\n#define false 0\r\n#endif\r\n\r\n//------------------------------------------------------------------------------\r\n/**\r\n *  Defines, enumerations, and structure definitions\r\n */\r\n\r\n#define DS1307_SLAVE_BASE_ADDR\t0x68\r\n#define DS1307_SECONDS_ADDR\t0x00\r\n#define DS1307_MINUTES_ADDR\t0x01\r\n#define DS1307_HOURS_ADDR\t0x02\r\n#define DS1307_DAY_ADDR\t\t0x03\r\n#define DS1307_DATE_ADDR\t0x04\r\n#define DS1307_MONTH_ADDR\t0x05\r\n#define DS1307_YEAR_ADDR\t0x06\r\n#define DS1307_CONTROL_ADDR\t0x07\r\n//This is the first address of general purpose ram on the device\r\n#define DS1307_LOW_RAM_ADDR\t0x08\r\n//There is no more memory at this address and beyond on the chip\r\n#define DS1307_HIGH_RAM_ADDR\t0x40\r\n#define DS1307_EPOCH_YEAR\t2000\r\n\r\ntypedef enum\r\n{\r\n\tDS1307_SQW_OUT_PIN_FREQUENCY_1Hz = \t\t0x10,\r\n\tDS1307_SQW_OUT_PIN_FREQUENCY_4_096kHz = \t0x11,\r\n\tDS1307_SQW_OUT_PIN_FREQUENCY_8_192kHz = \t0x12,\r\n\tDS1307_SQW_OUT_PIN_FREQUENCY_32_768kHz = \t0x13,\r\n\tDS1307_SQW_OUT_PIN_FREQUENCY_Low = \t\t0x0,\r\n\tDS1307_SQW_OUT_PIN_FREQUENCY_High = \t\t0x80\r\n} DS1307_SQW_Setting;\r\n\r\nvoid DS1307_Init();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_WriteRegister(unsigned char addr, unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\n// void DS1307_WriteRegisters(unsigned char addr, unsigned char *buffer, unsigned char length);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_ReadRegister(unsigned char addr);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\n// unsigned char DS1307_ReadRegisters(unsigned char addr, unsigned char *buffer, unsigned char length);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetSQWOutput(DS1307_SQW_Setting value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_StopClock();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_StartClock();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_ResetClock();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetSeconds(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetMinutes(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetHour(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetDay(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetDate(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetMonth(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetYear(unsigned int value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetControl(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetSQWOutput(DS1307_SQW_Setting value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetSeconds(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetMinutes(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetHours(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetDay(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetDate(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetMonth(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetYear(unsigned int value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetControl(unsigned char value);\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetSQWOutput();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetSeconds();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetMinutes();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetHour();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetDay();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetDate();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetMonth();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetYear();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetControl();\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nchar *DS1307_GetISO8601Time();\r\n\r\n\r\n#endif  /* DS1307_H */\r\n"
            },
            "objects": {
                "ds1307_common.c": "#include \"ds1307.h\"\r\n#include <stdio.h>\r\n\r\nchar isoRetBuffer[32];\r\n\r\nvoid DS1307_Init()\r\n{\r\n\tDS1307_SetSQWOutput(DS1307_SQW_OUT_PIN_FREQUENCY);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_WriteRegister(unsigned char addr, unsigned char value)\r\n{\r\n\t\r\n\tif(addr >= DS1307_HIGH_RAM_ADDR)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tunsigned char writeBytes[2];\r\n\twriteBytes[0] = addr;\r\n\twriteBytes[1] = value;\r\n\t\r\n\tAIR_I2C_Write(DS1307_SLAVE_BASE_ADDR, writeBytes, 2);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_WriteRegisters(unsigned char addr, unsigned char *buffer, unsigned char length)\r\n{\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_ReadRegister(unsigned char addr)\r\n{\r\n\tif(addr >= DS1307_HIGH_RAM_ADDR)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tunsigned char writeBytes[1];\r\n\tunsigned char readBytes[1];\r\n\t\r\n\twriteBytes[0] = addr;\r\n\t\r\n\tAIR_I2C_ComboRead(DS1307_SLAVE_BASE_ADDR, writeBytes, 1, readBytes, 1);\r\n\t\r\n\treturn readBytes[0];\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_ReadRegisters(unsigned char addr, unsigned char *buffer, unsigned char length)\r\n{\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetSQWOutput(DS1307_SQW_Setting value)\r\n{\r\n\tDS1307_WriteRegister(DS1307_CONTROL_ADDR, value);\r\n}\r\n\r\nvoid DS1307_StopClock()\r\n{\r\n\tDS1307_WriteRegister(DS1307_SECONDS_ADDR, DS1307_ReadRegister(DS1307_SECONDS_ADDR) | 0x80);\r\n}\r\n\r\nvoid DS1307_StartClock()\r\n{\r\n\tDS1307_WriteRegister(DS1307_SECONDS_ADDR, DS1307_ReadRegister(DS1307_SECONDS_ADDR) & 0x7F);\r\n}\r\n\r\nvoid DS1307_ResetClock()\r\n{\r\n\tDS1307_WriteRegister(DS1307_SECONDS_ADDR, 0x80);\r\n\tDS1307_WriteRegister(DS1307_MINUTES_ADDR, 0x00);\r\n\tDS1307_WriteRegister(DS1307_HOURS_ADDR, 0x00);\r\n\tDS1307_WriteRegister(DS1307_DAY_ADDR, 0x00);\r\n\tDS1307_WriteRegister(DS1307_DATE_ADDR, 0x00);\r\n\tDS1307_WriteRegister(DS1307_MONTH_ADDR, 0x00);\r\n\tDS1307_WriteRegister(DS1307_YEAR_ADDR, 0x00);\r\n\tDS1307_WriteRegister(DS1307_CONTROL_ADDR, 0x00);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetSeconds(unsigned char value)\r\n{\r\n\tunsigned char chBit = DS1307_ReadRegister(DS1307_SECONDS_ADDR) & 0x80;\r\n\t\r\n\tvalue = value % 60;\r\n\r\n\tunsigned char tens = value / 10;\r\n\tunsigned char ones = value - (tens * 10);\r\n\t\r\n\tvalue = chBit | (tens << 4) | ones;\r\n\t\r\n\tDS1307_WriteRegister(DS1307_SECONDS_ADDR, value);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetMinutes(unsigned char value)\r\n{\r\n\tvalue = value % 60;\r\n\r\n\tunsigned char tens = value / 10;\r\n\tunsigned char ones = value - (tens * 10);\r\n\t\r\n\tvalue = (tens << 4) | ones;\r\n\t\r\n\tDS1307_WriteRegister(DS1307_MINUTES_ADDR, value);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetHours(unsigned char value)\r\n{\r\n\tbool ampm = false;\r\n\t\r\n\tif(value > 12)\r\n\t{\r\n\t\tampm = true;\r\n\t}\r\n\t\r\n\tunsigned char tens = (value % 12) / 10;\r\n\tunsigned char ones = (value % 12) - (tens * 10);\r\n\t\r\n\tvalue = 0x40 | (ampm << 5) | (tens << 4) | (ones);\r\n\t\r\n\tDS1307_WriteRegister(DS1307_HOURS_ADDR, value);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetDay(unsigned char value)\r\n{\r\n\tvalue = value % 7;\r\n\t\r\n\tDS1307_WriteRegister(DS1307_DAY_ADDR, value);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetDate(unsigned char value)\r\n{\r\n\t//This is only a very very basic sanity check.\r\n\tvalue = value % 31;\r\n\r\n\tunsigned char tens = value / 10;\r\n\tunsigned char ones = value - (tens * 10);\r\n\t\r\n\tvalue = (tens << 4) | ones;\r\n\t\r\n\tDS1307_WriteRegister(DS1307_DATE_ADDR, value);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetMonth(unsigned char value)\r\n{\r\n\tvalue = value % 12;\r\n\r\n\tunsigned char tens = value / 10;\r\n\tunsigned char ones = value - (tens * 10);\r\n\t\r\n\tvalue = (tens << 4) | ones;\r\n\t\r\n\tDS1307_WriteRegister(DS1307_MONTH_ADDR, value);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetYear(unsigned int value)\r\n{\r\n\t//If the user wants to enter it in a complete form instead of just the last two digits then\r\n\t//this should do the trick.\r\n\tif(value >= DS1307_EPOCH_YEAR && value < DS1307_EPOCH_YEAR + 100)\r\n\t{\r\n\t\tvalue = value - DS1307_EPOCH_YEAR;\r\n\t}\r\n\t\r\n\telse\r\n\t{\r\n\t\tvalue = value % 99;\r\n\t}\r\n\r\n\tunsigned char tens = value / 10;\r\n\tunsigned char ones = value - (tens * 10);\r\n\t\r\n\tvalue = (tens << 4) | ones;\r\n\t\r\n\tDS1307_WriteRegister(DS1307_YEAR_ADDR, value);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nvoid DS1307_SetControl(unsigned char value)\r\n{\r\n\t//Masking out the unsafe stuff\r\n\tvalue = value & 0x93;\r\n\tDS1307_WriteRegister(DS1307_CONTROL_ADDR, value);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nDS1307_SQW_Setting DS1307_GetSQWOutput()\r\n{\r\n\treturn (DS1307_SQW_Setting)DS1307_ReadRegister(DS1307_CONTROL_ADDR);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetSeconds()\r\n{\r\n\tunsigned char value = DS1307_ReadRegister(DS1307_SECONDS_ADDR);\r\n\treturn (((value & 0x70) >> 4) * 10) + (value & 0x0F);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetMinutes()\r\n{\r\n\tunsigned char value = DS1307_ReadRegister(DS1307_MINUTES_ADDR);\r\n\treturn (((value & 0x70) >> 4) * 10) + (value & 0x0F);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetHours()\r\n{\r\n\tunsigned char value = DS1307_ReadRegister(DS1307_HOURS_ADDR);\r\n\t\r\n\tbool ampm = (value & 0x20) >> 5;\r\n\tunsigned char tens = (value & 0x10) >> 4;\r\n\tunsigned char ones = (value & 0x0F);\r\n\t\r\n\treturn (ampm * 12) + (tens * 10) + ones;\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetDay()\r\n{\r\n\treturn DS1307_ReadRegister(DS1307_DAY_ADDR);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetDate()\r\n{\r\n\tunsigned char value = DS1307_ReadRegister(DS1307_DATE_ADDR);\r\n\treturn (((value & 0x30) >> 4) * 10) + (value & 0x0F);\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetMonth()\r\n{\r\n\tunsigned char value = DS1307_ReadRegister(DS1307_MONTH_ADDR);\r\n\t\r\n\tunsigned char tens = (value & 0x10) >> 4;\r\n\tunsigned char ones = (value & 0x0F);\r\n\t\r\n\treturn (tens * 10) + ones;\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetYear()\r\n{\r\n\tunsigned char value = DS1307_ReadRegister(DS1307_MONTH_ADDR);\r\n\t\r\n\tunsigned char tens = (value & 0x10) >> 4;\r\n\tunsigned char ones = (value & 0x0F);\r\n\t\r\n\treturn (tens * 10) + ones + DS1307_EPOCH_YEAR;\r\n}\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nunsigned char DS1307_GetControl()\r\n{\r\n\treturn DS1307_ReadRegister(DS1307_CONTROL_ADDR);\r\n}\r\n\r\n\r\n/**\r\n* \r\n*\r\n* @param\r\n* @return\r\n*/\r\nchar *DS1307_GetISO8601Time()\r\n{\r\n\tunsigned int year = DS1307_GetYear();\r\n\tunsigned char month = DS1307_GetMonth();\r\n\tunsigned char date = DS1307_GetDate();\r\n\tunsigned char hours = DS1307_GetHour();\r\n\tunsigned char minutes = DS1307_GetMinutes();\r\n\tunsigned char seconds = DS1307_GetSeconds();\r\n\t\r\n\t//P[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss]\r\n\tsprintf(isoRetBuffer, \"%04d-%02d-%02dT%02d:%02d:%02d\", year, month, date, hours, minutes, seconds);\r\n\t\r\n\treturn isoRetBuffer;\r\n}"
            },
            "other": {}
        }
    },
    "label": "DS1307 Driver",
    "language": {
        "en": {
            "label": "DS1307 Driver"
        }
    },
    "manufacturer": "Maxim",
    "name": "ds1307",
    "signature": "",
    "type": "Embedded Library",
    "version": "1.0.0"
}